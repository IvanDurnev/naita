import os

from app.models import User
from app.yagpt.yagpt import YAGPT
import json

HELLO_LOGOUT = '''Привет! Я ИИ-Ассистент Найта, который помогает талантам в трудоустройстве. 

Здесь ты сможешь пройти прескрининг на одну из крутых вакансий ОТП Банка и получить приглашение на собеседование, а еще сделать классное резюме для себя.

Пожалуйста, авторизуйся.'''

HELLO_LOGIN = '''Привет! Я ИИ-Ассистент Найта, который помогает талантам в трудоустройстве. 

Здесь ты сможешь пройти прескрининг на одну из крутых вакансий ОТП Банка и получить приглашение на собеседование, а еще сделать классное резюме для себя.'''

REGISTER_PLEASE = 'Пожалуйста, авторизуйся.'

RESUME_SAVED = 'Твоё резюме сохранено, спасибо!'

RESUME_NOT_SAVED = 'Не удалось сохранить твое резюме. Возможно ссылка некорректная. Пришли, пожалуйста, еще раз.'

SELECT_VACANCIES = '''Привет! Я ИИ-Ассистент Найта, который помогает талантам в трудоустройстве. 

Здесь ты сможешь пройти прескрининг на одну из крутых вакансий ОТП Банка и получить приглашение на собеседование, а еще сделать классное резюме для себя.

Выбери вакансию, которая тебя интересует'''

VACANCY_SELECTED = '''Отлично. Я задам тебе несколько вопросов, сформирую для тебя резюме, и в случае совпадения твоих навыков и опыта с требованиями вакансии сразу же передам твои контакты специалисту ОТП Банка для прохождения интервью. Давай начнем!'''

NEW_VACANCY_SELECTED = '''Хорошо, передаю твое резюме и контактные данные - в ближайшие дни с тобой свяжется специалист, чтобы договориться о встрече.'''

SUGGEST_TO_CHECK_ANOTHER_VACANCIES = '''Проверить соответствие твоего резюме другим вакансиям в ОТП?'''

THERES_NO_ANY_VACANCY_FOR_YOU = 'Для тебя не нашлось подходящих вакансий'

REFERENCE_PROFILE = '''
{
    "education": {
        "main_education": {
            "degree": какое образование? высшее, среднее, среднепрофессиональное, курсы or "",
            "institution": название основного учебного заведения or "",
            "study_years": в каком году начал и закончил основное обучение? or "",
            "specialization": полученная специальность or ""
        },
        "additional_education": [
            {
                "institution": название основного учебного заведения or "",
                "study_years": в каком году начал и закончил основное обучение? or "",
                "specialization": полученная специальность or ""
            }
        ]
    },
    "work_experience": [
        {
            "company": название места работы or "",
            "dates": годы начала и окончания работы на этом месте or ""
        }
    ],
    "hard_skills": какими твердыми компетенциями обладаешь для выбранной вакансии? or "",
    "soft_skills": какими мягкими компетенциями или навыками обладаешь для выбранной вакансии? or "",
    "achievements": какие имеешь профессиональные награды или премии, какие есть достижения? or ""
}

'''

YA_GPT_PROMPT_PREFIX = f'''Посмотри запрос пользователя.
Распредели данные запроса по полям следующего JSON объекта

{REFERENCE_PROFILE}

Верни информацию в виде JSON.

Вот запрос пользователя:
'''

YA_GPT_DATA_REQUEST = f'''Посмотри информацию о обо мне. Строго проверь, что от меня получена информация по каждому пункту эталонного профиля.

Пункты эталонного профиля:
{REFERENCE_PROFILE}

Если по какому-то из пунктов эталонного профиля совсем нет информации, значит профиль не полный. 
В ответ пришли только один вопрос в виде JSON:
{{
"question_text": текст вопроса мне,
"variable": название поля, которое нужно запросить у меня
}}

Ко мне всегда обращайся на "ты".
В одном вопросе нужно запрашивать только один пункт.
Вопросы задавай в порядке, в котором они идут в эталонном профиле.
'''

YA_GPT_V2T = '''Посмотри текст, измени в нем обращение на "вы" на обращение на "ты" во всех случаях и формах. И верни исправленный текст.'''

def ya_gpt_clear_user_request(text):
    from app.yagpt.yagpt import YAGPT
    ya_gpt_client = YAGPT()
    prompt = f'''Посмотри следующий текст и если в нем есть персональные данные (номера документов, информация о здоровье, номера банковских карт), то замени эти данные на ***.
Верни только исправленный текст. Если персональных данных нет - верни в только текст в исходном виде.

Вот текст: {text}
'''
    response = ya_gpt_client.completion(prompt)
    if response:
        return response
    return text

def welcome(user):
    return f'Привет, {user.first_name}! {SELECT_VACANCIES}'

def lets_continue_with_vacancy(user):
    return f'{user.first_name}, c возвращением! Давай продолжим наше общение по вакансии "{user.get_main_vacancy().name}"?'

def main_vacancy_coincedence_analysis_success(user):
    return f'''{user.first_name}, я проанализировала твой профиль - ты успешно прошел на этап собеседования со специалистом ОТП Банка!
    
Передаю твое резюме и контактные данные - в ближайшие дни с тобой свяжется специалист, чтобы договориться о встрече.

Может, у тебя есть какие-то вопросы, которые хочется задать перед собеседованием? Я постараюсь ответить.'''

def main_vacancy_coincedence_analysis_fail(user, user_vacancy):
    return f'''{user.first_name}, я проанализировала твой профиль - к сожалению, некоторых параметров не хватает для соответствия этой вакансии {user.get_main_vacancy().name}. Вот мои рекомендации на будущее: 

{user_vacancy.recommendations}
    
Попробуй последовать этим рекомендациям, и я уверена,  что ты сможешь получить работу своей мечты! 

Копию рекомендаций также отправляю тебе на почту.

Также не забывай, что ты можешь просматривать открытые вакансии в ОТП Банке здесь, а при обновлении опыта работы, обучения или навыков можешь прийти ко мне снова, и мы обновим твое резюме.

Есть ли у тебя  какие-то вопросы, которые хочется задать? Я постараюсь ответить.'''

def clearing_and_isolating(data):
    return f'''{YA_GPT_PROMPT_PREFIX}\n\n{data}'''

def check_full_profile(user: User):
    text = '''Проверь, что мы имеем всю информацию о пользователе.'''

def v2t(text):
    return f'''{YA_GPT_V2T}\n\n{text}'''

def get_ya_gpt_data_request(user):
    prompt = f'''{YA_GPT_DATA_REQUEST}

Информация обо мне:
{user.profile}

Вот моя переписка с ассистентом:
{user.get_user_data()}
'''
    if os.environ.get('DEBUG'):
        print(prompt)
    return prompt

def assemble_reference_profile_with_user_data(user):
    ya_gpt_client = YAGPT()
    prompt = f'''Вот моя переписка с ассистентом:
{user.get_user_data()}
    
Собери всю информацию из этой переписки в эту структуру:
{REFERENCE_PROFILE}

Верни ответ в формате JSON.
'''
    response = json.loads(ya_gpt_client.completion(prompt).replace("```", "").strip())
    return response

def assemble_cv(user):
    ya_gpt_client = YAGPT()
    prompt = f'''Посмотри информацию обо мне:
Меня зовут: {user.first_name} {user.last_name}
Ссылка на фото: {user.get_avatar_external()}  - вставь его тэгом <img width="100" height="100">
{user.get_user_data()}

Составь для меня хорошее подробное CV.
Где не хватает информации - распиши красиво и подробно имеющуюся

Верни моё CV в формате HTML
'''
    response = ya_gpt_client.completion(prompt).replace("```", "").strip()
    return response
